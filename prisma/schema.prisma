generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId    String             @unique @map("supabase_user_id")
  stripeCustomerId  String             @unique @map("stripe_customer_id")
  email             String?
  name              String?
  iconUrl           String?            @map("icon_url")
  receiptName       String?            @map("receipt_name")
  points            Int                @default(0)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  pointTransactions PointTransaction[]
  userQuestions     UserQuestion[]

  @@map("users")
}

model Course {
  id        Int        @id @default(autoincrement())
  name      CourseType
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  lessons   Lesson[]

  @@map("courses")
}

model Lesson {
  id        Int        @id @default(autoincrement())
  name      String
  courseId  Int        @map("course_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  caution   String?
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("lessons")
}

model Question {
  id            Int            @id @default(autoincrement())
  title         String
  example       String?
  content       String
  lessonId      Int            @map("lesson_id")
  template      String
  exampleAnswer String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  lesson        Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userQuestions UserQuestion[]

  @@map("questions")
}

model UserQuestion {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String             @map("user_id") @db.Uuid
  questionId  Int                @map("question_id")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  status      UserQuestionStatus
  answers     Answer[]
  codeReviews CodeReview[]
  messages    Message[]
  question    Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("user_questions")
}

model Answer {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  answer         String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  userQuestionId String       @map("user_id") @db.Uuid
  messageId      String?      @unique @map("message_id") @db.Uuid
  message        Message?     @relation(fields: [messageId], references: [id])
  userQuestion   UserQuestion @relation(fields: [userQuestionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Message {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message          String
  sender           Sender
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  userQuestionId   String            @map("user_id") @db.Uuid
  answer           Answer?
  codeReview       CodeReview?
  userQuestion     UserQuestion      @relation(fields: [userQuestionId], references: [id], onDelete: Cascade)
  pointTransaction PointTransaction?

  @@map("messages")
}

model CodeReview {
  id             String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageId      String?             @unique @map("message_id") @db.Uuid
  overview       String
  result         CodeReviewResult
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  userQuestionId String              @map("user_id") @db.Uuid
  comments       CodeReviewComment[]
  message        Message?            @relation(fields: [messageId], references: [id])
  userQuestion   UserQuestion        @relation(fields: [userQuestionId], references: [id], onDelete: Cascade)

  @@map("code_reviews")
}

model CodeReviewComment {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  codeReviewId String     @map("code_review_id") @db.Uuid
  targetCode   String
  message      String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  codeReview   CodeReview @relation(fields: [codeReviewId], references: [id])

  @@map("code_review_comments")
}

model PointTransaction {
  id              Int                  @id @default(autoincrement())
  userId          String               @map("user_id") @db.Uuid
  kind            PointTransactionKind
  points          Int
  stripePaymentId String?              @map("stripe_payment_id")
  messageId       String?              @unique @map("message_id") @db.Uuid
  detail          String?
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  message         Message?             @relation(fields: [messageId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])

  @@index([stripePaymentId], map: "stripe_payment_id")
  @@map("point_transactions")
}

enum CodeReviewResult {
  APPROVED
  REJECTED
}

enum PointTransactionKind {
  USE
  PURCHASE
  PURCHASE_CANCELLED
  FAILED
  BONUS
  COMPENSATION
}

enum CourseType {
  JAVA_SCRIPT
  TYPE_SCRIPT
}

enum UserQuestionStatus {
  DRAFT
  PASSED
  REVISION_REQUIRED
}

enum Sender {
  USER
  SYSTEM
}
