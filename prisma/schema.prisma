generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId  String          @unique
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  email           String?
  name            String?

  stripeCustomerId  String   @unique @map("stripe_customer_id")
  points            Int      @default(0)
  
  pointTransactions  PointTransaction[]
  iconUrl         String? 
  receiptName     String?          

  answerHistories AnswerHistory[]
  answers         Answer[]

  @@map("users")
}

model Course {
  id        Int        @id @default(autoincrement())
  name      CourseType
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  lessons   Lesson[]

  @@map("courses")
}

model Lesson {
  id        Int        @id @default(autoincrement())
  name      String
  courseId  Int        @map("course_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("lessons")
}

model Question {
  id              Int             @id @default(autoincrement())
  title           String
  example         String?
  content         String
  lessonId        Int             @map("lesson_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  template        String
  answerHistories AnswerHistory[]
  answers         Answer[]
  lesson          Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Answer {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String     @map("user_id") @db.Uuid
  questionId Int        @map("question_id")
  answer     String
  status     StatusType
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@unique([userId, questionId])
  @@map("answers")
}

model AnswerHistory {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  questionId Int      @map("question_id")
  answer     String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answer_histories")
}

model Message {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  answerId  String   @map("answer_id") @db.Uuid
  message   String
  sender    Sender
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)


  pointTransaction   PointTransaction? 

  @@map("messages")
}

model PointTransaction {
  id               Int       @id @default(autoincrement())
  userId           String    @map("user_id") @db.Uuid
  kind             PointTransactionKind
  points           Int
  messageId        String?   @map("message_id") @unique
  stripePaymentId  String?   @map("stripe_payment_id")
  detail           String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  user             User      @relation(fields: [userId], references: [id])
  message          Message?  @relation(fields: [messageId], references: [id])

  @@map("point_transactions")
}

enum PointTransactionKind {
  USE
  PURCHASE
  PURCHASE_CANCELLED
  BONUS
  COMPENSATION
}

enum CourseType {
  JAVA_SCRIPT
  TYPE_SCRIPT
}

enum StatusType {
  DRAFT
  PASSED
  REVISION_REQUIRED
}

enum Sender {
  USER
  SYSTEM
}
